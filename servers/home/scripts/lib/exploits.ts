// Modified from https://github.com/catloversg/bitburner-scripts/blob/main/src/exploits.ts

declare global {
  // eslint-disable-next-line no-var, @typescript-eslint/no-explicit-any
  var webpackRequire: any;
  // eslint-disable-next-line no-var, @typescript-eslint/no-explicit-any
  var webpackChunkbitburner: any;
}

let ns: NS;
let doc: Document;

// noinspection JSUnusedLocalSymbols
function unclickable() {
  const unclickableDiv = doc.querySelector<HTMLDivElement>("#unclickable")!;
  unclickableDiv.style.display = "block";
  unclickableDiv.style.visibility = "visible";
  unclickableDiv.style.backgroundColor = "red";
  unclickableDiv.addEventListener("click", () => {
    unclickableDiv.style.display = "none";
    unclickableDiv.style.visibility = "hidden";
  });
}

// noinspection JSUnusedLocalSymbols
function undocumented() {
  // @ts-expect-error exploit
  ns.exploit();
}

// noinspection JSUnusedLocalSymbols
function rainbow() {
  // @ts-expect-error exploit
  ns.rainbow("noodles");
}

// noinspection JSUnusedLocalSymbols
function bypass() {
  // @ts-expect-error exploit
  ns.bypass(doc);
}

// noinspection JSUnusedLocalSymbols
function alterReality() {
  // Use browser developer tools to edit source code or value of variable x
}

// noinspection JSUnusedLocalSymbols
function prototypeTampering() {
  const originalFunction = Number.prototype.toExponential;
  Number.prototype.toExponential = function (fractionDigits?: number) {
    return originalFunction.apply(this, [fractionDigits]) + " ";
  };
}

/*
// Commented out to prevent unnecessary 'RAM' cost from the `window` reference
// noinspection JSUnusedLocalSymbols
function timeCompression() {
  const originalFunction = window.setTimeout;
  window.setTimeout = function (handler: TimerHandler, timeout?: number | undefined, ...args: unknown[]): number {
    if (timeout === 15000) {
      timeout = 250;
    }
    return originalFunction.apply(this, [handler, timeout, ...args]);
  };
}
 */

// noinspection JSUnusedLocalSymbols
function trueRecursion() {
  // Make sure you have SF1, then go to Arcade, it will load https://bitburner-official.github.io/bitburner-legacy/
  // Open Developer tools and change line in bundle.js:
  // From: parent.postMessage(__WEBPACK_IMPORTED_MODULE_22__Player_js__["a"].sourceFiles.length > 0, "*")
  // To: parent.postMessage(true, "*")
  // Alternative ways: anything that make Legacy version thinks that you have at least 1 SF. Eg: destroy BN1, edit
  // save file, ...
}

function exposeWebpackRequire() {
  if (!globalThis.webpackRequire) {
    globalThis.webpackChunkbitburner.push(
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      [[-1], {}, (webpackRequire: any) => globalThis.webpackRequire = webpackRequire]
    );
  }
}

function checkIfFunctionCodeIncludesSpecificString(object: unknown, specificString: string): boolean {
  return !!object && typeof object === "function" && !Object.hasOwn(object, "toString")
    && String(object).includes(specificString);
}

export function exposeGameInternalObjects(): void {
  if (!globalThis.webpackChunkbitburner) {
    return
  }
  exposeWebpackRequire()
  let SaveObjectModule
  let AllServersModule
  let AugmentationsModule
  let CompaniesModule
  let FormatNumberModule
  for (const moduleId of Object.keys(webpackRequire.m)) {
    const module = webpackRequire(moduleId)
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    for (const object of Object.values(module) as any) {
      if (!object) {
        continue
      }
      if (object.bitNodeN) {
        globalThis.Player = object
      }
      if (object.load && object.start && object.updateGame) {
        globalThis.Engine = object
      }
      // saveObject in src\SaveObject.ts
      if (object.getSaveData) {
        SaveObjectModule = module
      }
      // AddToAllServers function in src\Server\AllServers.ts
      if (
        checkIfFunctionCodeIncludesSpecificString(
          object,
          "Error: Trying to add a server with an existing IP"
        )
      ) {
        AllServersModule = module
      }

      // Begin Nerdpie's additional module checks
      if (
        checkIfFunctionCodeIncludesSpecificString(
          object,
          "AugmentationName.UnstableCircadianModulator"
        )
      ) {
        AugmentationsModule = module
      }

      if (object.Aevum && object.Illuminati) {
        // TODO This isn't that useful, as the reqs are minified to gibberish
        //    I would have to do several layers of mappings...
        globalThis.FactionInfo = object
      }

      if (
        checkIfFunctionCodeIncludesSpecificString(
          object,
          "suffixStart must be greater than or equal to 1000"
        )
      ) {
        FormatNumberModule = module
      }
      
      if (object.commandHistory && object.outputHistory && object.connectToServer) {
        globalThis.Terminal = object
      }

      if (object['Bachman & Associates'] && object['Blade Industries'] 
      && !object.Aevum && !object['Summit University']){
        CompaniesModule = module
      }
      // End Nerdpie's additional module checks
    }
  }
  if (!globalThis.Player) {
    throw new Error("Cannot expose Player")
  }
  if (!globalThis.Engine) {
    throw new Error("Cannot expose Engine")
  }
  if (!SaveObjectModule) {
    throw new Error("Cannot expose SaveObject")
  }
  globalThis.SaveObject = {
    saveObject: {
      getSaveData: async () => ""
    },
    loadGame: async () => true
  }
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  for (const object of Object.values(SaveObjectModule) as any) {
    if (object.getSaveData) {
      globalThis.SaveObject.saveObject = object
    }
    if (
      checkIfFunctionCodeIncludesSpecificString(
        object,
        "Could not load Staneks Gift from save"
      )
    ) {
      globalThis.SaveObject.loadGame = object
    }
  }
  if (!AllServersModule) {
    throw new Error("Cannot expose AllServers")
  }
  globalThis.AllServers = {
    loadAllServers: () => { },
    saveAllServers: () => ""
  }
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  for (const object of Object.values(AllServersModule) as any) {
    if (checkIfFunctionCodeIncludesSpecificString(object, "JSON.parse")) {
      globalThis.AllServers.loadAllServers = object
    }
    if (checkIfFunctionCodeIncludesSpecificString(object, "JSON.stringify")) {
      globalThis.AllServers.saveAllServers = object
    }
  }

  // Nerdpie's additions
  if (!AugmentationsModule) {
    throw new Error("Cannot expose Augmentations")
  }
  globalThis.Augmentations = {
    donationBonus: () => 0,
    metadata: () => { }
  }
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  for (const object of Object.values(AugmentationsModule) as any) {
    if (!!object && typeof object === "number") {
      globalThis.Augmentations.donationBonus = object
    }
    if (!!object && typeof object === "object") {
      globalThis.Augmentations.metadata = Object.values(object)
    }
  }

  if (!CompaniesModule) {
    throw new Error("Cannot expose Companies")
  }
  globalThis.Companies = {
    metadata: () => {}
  }
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  for (const object of Object.values(CompaniesModule) as any) {
    if (!!object && typeof object === "object") {
      globalThis.Companies.metadata = Object.values(object)
    }
  }

  if (!globalThis.FactionInfo) {
    throw new Error("Cannot expose FactionInfo")
  }

  if (!FormatNumberModule) {
    throw new Error("Cannot expose formatNumber")
  }
  globalThis.NSNumbers = {
    formatNumber: () => "",
    formatPercent: () => ""
  }
  for (const object of Object.values(FormatNumberModule)) {
    // TODO Determine if we want any of the other formats from `ui/formatNumber.ts`
    if (
      checkIfFunctionCodeIncludesSpecificString(
        object,
        "suffixStart must be greater than or equal to 1000"
      )
    ) {
      globalThis.NSNumbers.formatNumber = object
    }
    if (
      checkIfFunctionCodeIncludesSpecificString(
        object,
        "percent"
      )
    ) {
      globalThis.NSNumbers.formatPercent = object
    }
  }

  if (!globalThis.Terminal) {
    throw new Error("Cannot expose Terminal")
  }

}

export function openDevMenu() {
  if (!globalThis.webpackChunkbitburner) {
    return
  }
  exposeWebpackRequire()
  for (const moduleId of Object.keys(webpackRequire.m)) {
    const module = webpackRequire(moduleId)
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    for (const object of Object.values(module)) {
      // @ts-ignore
      if (object && object.toPage) {
        // @ts-ignore
        object.toPage("Dev")
        return
      }
    }
  }
}

/*
Memo: To use objects/functions exposed by the above, add this:
```js
import { exposeGameInternalObjects } from "servers/home/scripts/lib/exploits"
```
and then
```js
if (!globalThis.<ObjectOfInterest>) {
  exposeGameInternalObjects()
}

*/

export function main(nsContext : NS): void {
  ns = nsContext
  doc = globalThis['document']

  exposeGameInternalObjects();
  // unclickable();
  // undocumented();
  // rainbow();
  // bypass();
  // prototypeTampering();
  // timeCompression();
}
