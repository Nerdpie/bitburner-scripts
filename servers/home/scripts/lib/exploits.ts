// Modified from https://github.com/catloversg/bitburner-scripts/blob/main/src/exploits.ts
// noinspection ES6ConvertVarToLetConst

declare global {
  // eslint-disable-next-line no-var, @typescript-eslint/no-explicit-any
  var webpackRequire: any;
  // eslint-disable-next-line no-var, @typescript-eslint/no-explicit-any
  var webpackChunkbitburner: any;
}

let ns: NS;
let doc: Document;


function exposeWebpackRequire() {
  if (!globalThis.webpackRequire) {
    // noinspection AssignmentResultUsedJS
    globalThis.webpackChunkbitburner.push(
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      [[-1], {}, (webpackRequire: any) => globalThis.webpackRequire = webpackRequire]
    );
  }
}

function checkIfFunctionCodeIncludesSpecificString(object: unknown, specificString: string): boolean {
  // noinspection OverlyComplexBooleanExpressionJS
  return !!object && typeof object === "function" && !Object.hasOwn(object, "toString")
    && String(object).includes(specificString);
}

export function exposeGameInternalObjects(): void {
  if (!globalThis.webpackChunkbitburner) {
    return
  }
  exposeWebpackRequire()
  let SaveObjectModule
  let AllServersModule
  let AugmentationsModule
  let CompaniesModule
  let FactionsModule
  let FormatNumberModule
  for (const moduleId of Object.keys(webpackRequire.m)) {
    const module = webpackRequire(moduleId)
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    for (const object of Object.values(module) as any) {
      if (!object) {
        continue
      }
      if (object.bitNodeN) {
        globalThis.Player = object
      }
      if (object.load && object.start && object.updateGame) {
        globalThis.Engine = object
      }
      // saveObject in src\SaveObject.ts
      if (object.getSaveData) {
        SaveObjectModule = module
      }
      // AddToAllServers function in src\Server\AllServers.ts
      if (
        checkIfFunctionCodeIncludesSpecificString(
          object,
          "Error: Trying to add a server with an existing IP"
        )
      ) {
        AllServersModule = module
      }

      // Begin Nerdpie's additional module checks
      if (
        checkIfFunctionCodeIncludesSpecificString(
          object,
          "AugmentationName.UnstableCircadianModulator"
        )
      ) {
        AugmentationsModule = module
      }

      // Credit CatLover: https://discord.com/channels/415207508303544321/928919860891750410/1319167709547729020
      if (checkIfFunctionCodeIncludesSpecificString(object, "Invalid faction in player save factions array")) {
        FactionsModule = module;
      }

      if (
        checkIfFunctionCodeIncludesSpecificString(
          object,
          "suffixStart must be greater than or equal to 1000"
        )
      ) {
        FormatNumberModule = module
      }
      
      if (object.commandHistory && object.outputHistory && object.connectToServer) {
        globalThis.Terminal = object
      }

      // noinspection OverlyComplexBooleanExpressionJS - Needed to ensure we have the right module
      if (object['Bachman & Associates'] && object['Blade Industries']
      && !object.Aevum && !object['Summit University']){
        CompaniesModule = module
      }
      // End Nerdpie's additional module checks
    }
  }
  if (!globalThis.Player) {
    throw new Error("Cannot expose Player")
  }
  if (!globalThis.Engine) {
    throw new Error("Cannot expose Engine")
  }
  if (!SaveObjectModule) {
    throw new Error("Cannot expose SaveObject")
  }
  globalThis.SaveObject = {
    saveObject: {
      getSaveData: async () => ""
    },
    loadGame: async () => true
  }
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  for (const object of Object.values(SaveObjectModule) as any) {
    if (object.getSaveData) {
      globalThis.SaveObject.saveObject = object
    }
    if (
      checkIfFunctionCodeIncludesSpecificString(
        object,
        "Could not load Staneks Gift from save"
      )
    ) {
      globalThis.SaveObject.loadGame = object
    }
  }
  if (!AllServersModule) {
    throw new Error("Cannot expose AllServers")
  }
  globalThis.AllServers = {
    loadAllServers: () => { },
    saveAllServers: () => ""
  }
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  for (const object of Object.values(AllServersModule) as any) {
    if (checkIfFunctionCodeIncludesSpecificString(object, "JSON.parse")) {
      globalThis.AllServers.loadAllServers = object
    }
    if (checkIfFunctionCodeIncludesSpecificString(object, "JSON.stringify")) {
      globalThis.AllServers.saveAllServers = object
    }
  }

  // Nerdpie's additions
  if (!AugmentationsModule) {
    throw new Error("Cannot expose Augmentations")
  }
  globalThis.Augmentations = {
    donationBonus: () => 0,
    metadata: () => { }
  }
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  for (const object of Object.values(AugmentationsModule) as any) {
    if (!!object && typeof object === "number") {
      globalThis.Augmentations.donationBonus = object
    }
    if (!!object && typeof object === "object") {
      globalThis.Augmentations.metadata = Object.values(object)
    }
  }

  if (!CompaniesModule) {
    throw new Error("Cannot expose Companies")
  }
  globalThis.Companies = {
    metadata: () => {}
  }
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  for (const object of Object.values(CompaniesModule) as any) {
    if (!!object && typeof object === "object") {
      globalThis.Companies.metadata = Object.values(object)
    }
  }

  if (!FactionsModule) {
    throw new Error("Cannot expose Factions")
  }
  // Credit CatLover: https://discord.com/channels/415207508303544321/928919860891750410/1319167709547729020
  for (const object of Object.values(FactionsModule)) {
    if (typeof object === 'object') {
      globalThis.Factions = object;
      break;
    }
  }

  if (!FormatNumberModule) {
    throw new Error("Cannot expose formatNumber")
  }
  globalThis.NSNumbers = {
    formatNumber: () => "",
    formatPercent: () => ""
  }
  for (const object of Object.values(FormatNumberModule)) {
    // TODO Determine if we want any of the other formats from `ui/formatNumber.ts`
    if (
      checkIfFunctionCodeIncludesSpecificString(
        object,
        "suffixStart must be greater than or equal to 1000"
      )
    ) {
      globalThis.NSNumbers.formatNumber = object
    }
    if (
      checkIfFunctionCodeIncludesSpecificString(
        object,
        "percent"
      )
    ) {
      globalThis.NSNumbers.formatPercent = object
    }
  }

  if (!globalThis.Terminal) {
    throw new Error("Cannot expose Terminal")
  }

}

export function openDevMenu() {
  if (!globalThis.webpackChunkbitburner) {
    return
  }
  exposeWebpackRequire()
  for (const moduleId of Object.keys(webpackRequire.m)) {
    const module = webpackRequire(moduleId)
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    for (const object of Object.values(module)) {
      // @ts-ignore
      if (object && object.toPage) {
        // @ts-ignore
        object.toPage("Dev")
        return
      }
    }
  }
}

/*
Memo: To use objects/functions exposed by the above, add this:
```js
import { exposeGameInternalObjects } from "servers/home/scripts/lib/exploits"
```
and then
```js
if (!globalThis.<ObjectOfInterest>) {
  exposeGameInternalObjects()
}

*/

export function main(nsContext : NS): void {
  ns = nsContext
  doc = globalThis['document']

  exposeGameInternalObjects();
  // unclickable();
  // undocumented();
  // rainbow();
  // bypass();
  // prototypeTampering();
  // timeCompression();
}
