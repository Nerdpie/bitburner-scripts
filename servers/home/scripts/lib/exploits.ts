// TODO Determine if there is a clean-ish way to leave these inspections enabled
/* eslint-disable @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call */
// Modified from https://github.com/catloversg/bitburner-scripts/blob/main/src/exploits.ts
// noinspection ES6ConvertVarToLetConst
import type {Augmentation}                               from '@/game_internal_types/Augmentation/Augmentation';
import type {Company}                                    from '@/game_internal_types/Company/Company';
import type {Faction}                                    from '@/game_internal_types/Faction/Faction';
import type {PlayerObject}                               from '@/game_internal_types/PersonObjects/Player/PlayerObject';
import type {Terminal}                                   from '@/game_internal_types/Terminal/Terminal';
import type {AugmentationName, CompanyName, FactionName} from '@enums';

declare global {
  // eslint-disable-next-line no-var, @typescript-eslint/no-explicit-any
  var webpackRequire: any;
  // eslint-disable-next-line no-var, @typescript-eslint/no-explicit-any
  var webpackChunkbitburner: any;
}

function exposeWebpackRequire() {
  if (!globalThis.webpackRequire) {
    // noinspection AssignmentResultUsedJS
    globalThis.webpackChunkbitburner.push(
      // eslint-disable-next-line @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-return
      [[-1], {}, (webpackRequire: any) => globalThis.webpackRequire = webpackRequire]
    );
  }
}

function checkIfFunctionCodeIncludesSpecificString(object: unknown, specificString: string): boolean {
  /* eslint-disable n/no-unsupported-features/es-builtins */
  // FIXME Check where our version of Node is specified and bump it...
  // noinspection OverlyComplexBooleanExpressionJS
  return !!object && typeof object === 'function' && !Object.hasOwn(object, 'toString')
    && String(object).includes(specificString);
}

export function exposeGameInternalObjects(): void {
  if (!globalThis.webpackChunkbitburner) {
    return;
  }
  exposeWebpackRequire();
  let SaveObjectModule;
  let AllServersModule;
  let AugmentationsModule;
  let CompaniesModule;
  let FactionsModule;
  let FormatNumberModule;
  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
  for (const moduleId of Object.keys(webpackRequire.m)) {
    const module = webpackRequire(moduleId);
    // eslint-disable-next-line @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-argument
    for (const object of Object.values(module) as any) {
      if (!object) {
        continue;
      }
      if (object.bitNodeN) {
        globalThis.Player = object as PlayerObject;
      }
      if (object.load && object.start && object.updateGame) {
        // noinspection JSConstantReassignment - Not actually reassigning
        globalThis.Engine = object;
      }
      // saveObject in src\SaveObject.ts
      if (object.getSaveData) {
        SaveObjectModule = module;
      }
      // AddToAllServers function in src\Server\AllServers.ts
      if (
        checkIfFunctionCodeIncludesSpecificString(
          object,
          'Error: Trying to add a server with an existing IP'
        )
      ) {
        AllServersModule = module;
      }

      // Begin Nerdpie's additional module checks
      if (
        checkIfFunctionCodeIncludesSpecificString(
          object,
          'AugmentationName.UnstableCircadianModulator'
        )
      ) {
        AugmentationsModule = module;
      }

      // Credit CatLover: https://discord.com/channels/415207508303544321/928919860891750410/1319167709547729020
      if (checkIfFunctionCodeIncludesSpecificString(object, 'Invalid faction in player save factions array')) {
        FactionsModule = module;
      }

      if (
        checkIfFunctionCodeIncludesSpecificString(
          object,
          'suffixStart must be greater than or equal to 1000'
        )
      ) {
        FormatNumberModule = module;
      }

      if (object.commandHistory && object.outputHistory && object.connectToServer) {
        globalThis.Terminal = object as Terminal;
      }

      // noinspection OverlyComplexBooleanExpressionJS - Needed to ensure we have the right module
      if (object['Bachman & Associates'] && object['Blade Industries']
        && !object.Aevum && !object['Summit University']) {
        CompaniesModule = module;
      }

      if (object['Rob Store']) {
        globalThis.Crimes = object;
      }
      // End Nerdpie's additional module checks
    }
  }
  if (!globalThis.Player) {
    throw new Error('Cannot expose Player');
  }
  if (!globalThis.Engine) {
    throw new Error('Cannot expose Engine');
  }
  if (!SaveObjectModule) {
    throw new Error('Cannot expose SaveObject');
  }
  globalThis.SaveObject = {
    saveObject: {
      // eslint-disable-next-line @typescript-eslint/require-await
      getSaveData: async () => ''
    },
    // eslint-disable-next-line @typescript-eslint/require-await
    loadGame: async () => true
  };
  // eslint-disable-next-line @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-argument
  for (const object of Object.values(SaveObjectModule) as any) {
    if (object.getSaveData) {
      globalThis.SaveObject.saveObject = object;
    }
    if (
      checkIfFunctionCodeIncludesSpecificString(
        object,
        'Could not load Staneks Gift from save'
      )
    ) {
      globalThis.SaveObject.loadGame = object;
    }
  }
  if (!AllServersModule) {
    throw new Error('Cannot expose AllServers');
  }
  globalThis.AllServers = {
    loadAllServers: () => { },
    saveAllServers: () => ''
  };
  // eslint-disable-next-line @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-argument
  for (const object of Object.values(AllServersModule) as any) {
    if (checkIfFunctionCodeIncludesSpecificString(object, 'JSON.parse')) {
      globalThis.AllServers.loadAllServers = object;
    }
    if (checkIfFunctionCodeIncludesSpecificString(object, 'JSON.stringify')) {
      globalThis.AllServers.saveAllServers = object;
    }
  }

  // Nerdpie's additions
  if (!AugmentationsModule) {
    throw new Error('Cannot expose Augmentations');
  }
  // eslint-disable-next-line @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-argument
  for (const object of Object.values(AugmentationsModule) as any) {
    if (!!object && typeof object === 'object') {
      globalThis.Augmentations = object as Record<AugmentationName, Augmentation>;
    }
  }

  if (!CompaniesModule) {
    throw new Error('Cannot expose Companies');
  }
  // eslint-disable-next-line @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-argument
  for (const object of Object.values(CompaniesModule) as any) {
    if (!!object && typeof object === 'object') {
      globalThis.Companies = object as Record<CompanyName, Company>;
    }
  }

  if (!FactionsModule) {
    throw new Error('Cannot expose Factions');
  }
  // Credit CatLover: https://discord.com/channels/415207508303544321/928919860891750410/1319167709547729020
  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
  for (const object of Object.values(FactionsModule)) {
    if (typeof object === 'object') {
      // noinspection JSConstantReassignment - Not actually reassigning
      globalThis.Factions = object as Record<FactionName, Faction>;
      break;
    }
  }

  if (!FormatNumberModule) {
    throw new Error('Cannot expose formatNumber');
  }
  globalThis.NSNumbers = {
    formatNumber: () => '',
    formatPercent: () => ''
  };
  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
  for (const object of Object.values(FormatNumberModule)) {
    // TODO Determine if we want any of the other formats from `ui/formatNumber.ts`
    if (
      checkIfFunctionCodeIncludesSpecificString(
        object,
        'suffixStart must be greater than or equal to 1000'
      )
    ) {
      globalThis.NSNumbers.formatNumber = object;
    }
    if (
      checkIfFunctionCodeIncludesSpecificString(
        object,
        'percent'
      )
    ) {
      globalThis.NSNumbers.formatPercent = object;
    }
  }

  if (!globalThis.Terminal) {
    throw new Error('Cannot expose Terminal');
  }

}

export function openDevMenu() {
  if (!globalThis.webpackChunkbitburner) {
    return;
  }
  exposeWebpackRequire();
  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
  for (const moduleId of Object.keys(webpackRequire.m)) {
    const module = webpackRequire(moduleId);

    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
    for (const object of Object.values(module)) {
      // @ts-expect-error ESLint, bug CatLover about why this suppression is needed
      if (object && object.toPage) {
        // @ts-expect-error ESLint, bug CatLover about why this suppression is needed
        object.toPage('Dev');
        return;
      }
    }
  }
}

export function main(): void {
  exposeGameInternalObjects();
}
